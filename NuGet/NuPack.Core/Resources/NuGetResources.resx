<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AtomFeedPackageRepo_InvalidFeedContent" xml:space="preserve">
    <value>Unable to read feed contents. Verify that the feed conforms to the Atom Syndication format.</value>
  </data>
  <data name="AtomFeedPackageRepo_InvalidFeedSource" xml:space="preserve">
    <value>Unable to read feed. Verify that a feed is hosted at the remote server and is available.</value>
  </data>
  <data name="CircularDependencyDetected" xml:space="preserve">
    <value>Circular dependency detected '{0}'</value>
  </data>
  <data name="ConflictErrorWithDependent" xml:space="preserve">
    <value>Conflict occurred. '{0}' referenced but requested '{1}'. '{2}' depends on '{0}'</value>
  </data>
  <data name="ConflictErrorWithDependents" xml:space="preserve">
    <value>Conflict occurred. '{0}' referenced but requested '{1}'. '{2}' depend on '{0}'</value>
  </data>
  <data name="Debug_AddedFile" xml:space="preserve">
    <value>Added file '{0}'</value>
  </data>
  <data name="Debug_AddedFileToFolder" xml:space="preserve">
    <value>Added file '{0}' to folder '{1}'</value>
  </data>
  <data name="Debug_DependencyAlreadyInstalled" xml:space="preserve">
    <value>Dependency '{0}' already installed</value>
  </data>
  <data name="Debug_DependencyAlreadyReferenced" xml:space="preserve">
    <value>Dependency '{0}' already referenced</value>
  </data>
  <data name="Debug_LookingForUpdates" xml:space="preserve">
    <value>Looking for updates for '{0}'...</value>
  </data>
  <data name="Debug_ProcessingDependencies" xml:space="preserve">
    <value>Processing dependencies for '{0}'</value>
  </data>
  <data name="Debug_RemovedFile" xml:space="preserve">
    <value>Removed file '{0}'</value>
  </data>
  <data name="Debug_RemovedFileFromFolder" xml:space="preserve">
    <value>Removed file '{0}' to folder '{1}'</value>
  </data>
  <data name="Debug_RemovedFolder" xml:space="preserve">
    <value>Removed folder '{0}'</value>
  </data>
  <data name="DependencyOnlyCannotMixDependencies" xml:space="preserve">
    <value>Child dependencies of dependency only packages cannot mix external and project packages</value>
  </data>
  <data name="ExternalPackagesCannotDependOnProjectLevelPackages" xml:space="preserve">
    <value>External packages cannot depend on packages that target projects.</value>
  </data>
  <data name="Log_AttemptingToRetrievePackageFromSource" xml:space="preserve">
    <value>'{0}' not installed. Attempting to retrieve dependency from source...</value>
  </data>
  <data name="Log_AttemptingToRetrievePackageReferenceFromSource" xml:space="preserve">
    <value>'{0}' not referenced. Retrieving dependency...</value>
  </data>
  <data name="Log_LeavingPackageInstalled" xml:space="preserve">
    <value>Leaving '{0}' installed</value>
  </data>
  <data name="Log_ModifiedConfiguration" xml:space="preserve">
    <value>Modified configuration file</value>
  </data>
  <data name="Log_NoUpdatesAvailable" xml:space="preserve">
    <value>No updates available for '{0}'</value>
  </data>
  <data name="Log_PackageAlreadyInstalled" xml:space="preserve">
    <value>'{0}' already installed</value>
  </data>
  <data name="Log_PackageInstalledSuccessfully" xml:space="preserve">
    <value>Successfully installed '{0}'</value>
  </data>
  <data name="Log_PackageRetrieveSuccessfully" xml:space="preserve">
    <value>Done</value>
  </data>
  <data name="Log_PackageUpToDate" xml:space="preserve">
    <value>'{0}' is up to date</value>
  </data>
  <data name="Log_ProjectAlreadyReferencesPackage" xml:space="preserve">
    <value>{0} already has a reference to '{1}'</value>
  </data>
  <data name="Log_SuccessfullyAddedPackageReference" xml:space="preserve">
    <value>Successfully added '{0}' to {1}</value>
  </data>
  <data name="Log_SuccessfullyRemovedPackageReference" xml:space="preserve">
    <value>Successfully removed '{0}' from {1}</value>
  </data>
  <data name="Log_SuccessfullyUninstalledPackage" xml:space="preserve">
    <value>Successfully uninstalled '{0}'</value>
  </data>
  <data name="Log_UpdatingToSpecificVersion" xml:space="preserve">
    <value>Updating '{0}' to version '{1}'</value>
  </data>
  <data name="Manifest_DependencyIdRequired" xml:space="preserve">
    <value>Dependency Id is required.</value>
  </data>
  <data name="Manifest_RequiredMetadataMissing" xml:space="preserve">
    <value>{0} is required.</value>
  </data>
  <data name="Manifest_RequireLicenseAcceptanceRequiresLicenseUrl" xml:space="preserve">
    <value>Enabling license acceptance requires a license url.</value>
  </data>
  <data name="Manifest_UriCannotBeEmpty" xml:space="preserve">
    <value>{0} cannot be empty.</value>
  </data>
  <data name="NewerVersionAlreadyReferenced" xml:space="preserve">
    <value>Already referencing a newer version of '{0}'</value>
  </data>
  <data name="PackageDoesNotContainManifest" xml:space="preserve">
    <value>Package does not contain a manifest.</value>
  </data>
  <data name="PackageHasDependent" xml:space="preserve">
    <value>Unable to uninstall '{0}' because '{1}' depends on it</value>
  </data>
  <data name="PackageHasDependentReference" xml:space="preserve">
    <value>Unable to remove reference to '{0}' because '{1}' depends on it</value>
  </data>
  <data name="PackageHasDependents" xml:space="preserve">
    <value>Unable to uninstall '{0}' because '{1}' depend on it</value>
  </data>
  <data name="PackageHasMultipleDependentsReferenced" xml:space="preserve">
    <value>Unable to remove reference to '{0}' because '{1}' depend on it</value>
  </data>
  <data name="PackageHasNoProjectContent" xml:space="preserve">
    <value>Unable to add reference to '{0}' because it has no project content.</value>
  </data>
  <data name="PackageMissingRequiredProperty" xml:space="preserve">
    <value>Package is missing required property '{0}'</value>
  </data>
  <data name="PackageNotInstalled" xml:space="preserve">
    <value>Package '{0}' is not installed</value>
  </data>
  <data name="PackageSourceMustBePhysicalPath" xml:space="preserve">
    <value>Package source must be a rooted physical path</value>
  </data>
  <data name="ProjectDoesNotHaveReference" xml:space="preserve">
    <value>{0} does not reference '{1}'.</value>
  </data>
  <data name="ReferenceDoesNotExist" xml:space="preserve">
    <value>Unable to add a assembly reference to '{0}'. The file does not exist</value>
  </data>
  <data name="TokenHasNoValue" xml:space="preserve">
    <value>The replacement token '{0}' has no value.</value>
  </data>
  <data name="UnableToFindCompatibleReference" xml:space="preserve">
    <value>Unable to find assembly references that are compatible with the target framework '{0}'</value>
  </data>
  <data name="UnableToLocateDependency" xml:space="preserve">
    <value>Unable to locate dependency '{0}'. It may have been uninstalled</value>
  </data>
  <data name="UnableToResolveDependency" xml:space="preserve">
    <value>Unable to resolve dependency '{0}'</value>
  </data>
  <data name="UnknownPackage" xml:space="preserve">
    <value>Unable to find package '{0}'</value>
  </data>
  <data name="Warning_AssemblyAlreadyReferenced" xml:space="preserve">
    <value>'{0}' already has an assembly reference to '{1}'</value>
  </data>
  <data name="Warning_FileAlreadyExists" xml:space="preserve">
    <value>'{0}' already exists. Skipping...</value>
  </data>
  <data name="Warning_FileModified" xml:space="preserve">
    <value>Skipping '{0}' because it was modified</value>
  </data>
  <data name="Warning_PackageSkippedBecauseItIsInUse" xml:space="preserve">
    <value>'{0}' skipped, because it is in use by '{1}'</value>
  </data>
  <data name="Warning_RemovingPackageReferenceWillBreakDependents" xml:space="preserve">
    <value>Removing '{0}' might cause '{1}' to be broken</value>
  </data>
  <data name="Warning_UninstallingPackageWillBreakDependents" xml:space="preserve">
    <value>Uninstalling '{0}' might cause '{1}' to be broken</value>
  </data>
  <data name="Warning_UninstallingPackageWillBreakDependents1" xml:space="preserve">
    <value>Removing '{0}' might cause '{1}' to be broken</value>
  </data>
  <data name="AggregateQueriesRequireOrder" xml:space="preserve">
    <value>Aggregate queries require at least one OrderBy.</value>
  </data>
</root>